View(food_h)
View(food_ave)
vary_hours <- nrow(food_ave[food_ave$Hours_on_Jobs == -4,])
vary_hours
food_h <- subset(food_ave, food_ave$Hours_of_job != -4 & food_ave$Hours_of_job != -1)
summary(food_ave$Hours_on_Jobs)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(food_h$Hours_of_job)
food_h <- subset(food_ave, food_ave$Hours_of_job != -4 & food_ave$Hours_of_job != -1)
summary(food_ave$Hours_on_Jobs)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(food_ave$Hours_on_Jobs)
summary(food_ave$Hours_on_Jobs)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(food_ave$Hours_on_Jobs)
str(food_ave)
aov(FoodSecurity_score ~ Hours_on_Jobs , data = food_ave)
aov(FoodSecurity_score ~ Hours_on_Jobs , data = food_ave)
aov(Hours_on_Jobs ~ FoodSecurity_score, data = food_ave)
h_anova <- aov(Hours_on_Jobs ~ FoodSecurity_score, data = food_ave)
h_tuskey <- TukeyHSD(h_anova)
h_anova <- aov(Hours_on_Jobs ~ FoodSecurity_score, data = food_ave)
h_tuskey <- TukeyHSD(h_anova)
summary(h_tuskey)
h_anova <- aov(Hours_on_Jobs ~ FoodSecurity_score, data = food_ave)
h_tuskey <- TukeyHSD(h_anova)
h_tuskey
h_anova <- aov(Hours_on_Jobs ~ FoodSecurity_score, data = food_ave)
h_tuskey <- TukeyHSD(h_anova)
summary(h_anova)
h_tuskey
ggplot(food_ave, aes(x=FoodSecurity_score, y=Hours_on_Jobs)) +
geom_boxplot( colour=c("#ff0000","#11cc11","#0000ff"), outlier.shape=8, outlier.size=4) +
labs(title="Boxplot for Hours on Jobs", x="Control / Treatment", y = "Hours on Job")
ggplot(food_ave, aes(x=FoodSecurity_score, y=Hours_on_Jobs)) +
geom_boxplot( colour=c("red","blue","violet","navy blue","black"), outlier.shape=8, outlier.size=4) +
labs(title="Boxplot for Hours on Jobs", x="Control / Treatment", y = "Hours on Job")
h_anova <- aov(Hours_on_Jobs ~ FoodSecurity_score, data = food_ave)
h_tuskey <- TukeyHSD(h_anova)
summary(h_anova)
h_tuskey
scaledata <- as.data.frame(scale(FS_Subset[1:11], center = TRUE, scale = TRUE))
library(dplyr)
library(ezids)
library(ggplot2)
library(epiR)
library(pROC)
FS_Subset <- subset(Food_Sec, HRINTSTA == 001 & HRSUPINT == 001 & HRFS12MD != -9)
FS_Subset <- subset(FS_Subset, select = c(	"GESTFIPS",	"HRNUMHOU",	"HEFAMINC",	"HESP1",	"PTDTRACE",	"PRCITSHP",	"PEMJNUM",	"PEHRUSL1",	"PEEDUCA", "PRNMCHLD" , "HRFS12MD"))
FS_Subset <- FS_Subset %>% rename("States" = "GESTFIPS", "Family_Size" = "HRNUMHOU",	"Household_Income" = "HEFAMINC",	"SNAP" = "HESP1",	"Ethnicity" =	"PTDTRACE", "Citizenship_status" = "PRCITSHP",	"Number_of_Jobs" = "PEMJNUM",	"Hours_on_Jobs" = "PEHRUSL1" , "Education_Level" = "PEEDUCA" , "Number_of_children" = "PRNMCHLD",  "FoodSecurity_score" = "HRFS12MD")
## Converting the all the columns to factors as they are all ordinal(except the Id, but since it's categorical i'm converting it into a factor too)
FS_Subset[] <- lapply( FS_Subset, factor)
str(FS_Subset)
levels(FS_Subset$'FoodSecurity_score') <- c( "High Food Security", "Marginal Food Security", "Low Food Security", "Very Low Food Security")
FS_Subset$FS_Status <- FS_Subset$FoodSecurity_score
levels(FS_Subset$FS_Status) <- c( "Food Secure", "Food Secure", "Food Insecure", "Food Insecure")
levels(FS_Subset$'Ethnicity') <- c('White only', 'Black only', 'American Indian, Alaskan native only', 'Asian Only', 'Hawaiian', 'White-black', 'White-AI', 'White-Asian', 'White-HP', 'Black-AI', 'Black-Asian', 'Black-HP', 'AI-Asian', 'AI-HP', 'Asian-HP', 'W-B-AI', 'W-B-A', 'W-B-HP', 'W-AI-A', 'W-AI-HP', 'W-A-HP', 'B-AI-A', 'W-B-AL-A', 'W-AI-A-HP', 'Other 3 race combo', 'Other 4 and 5 race combo')
levels(FS_Subset$'Citizenship_status') <- c('NATIVE, BORN IN THE UNITED STATES', 'NATIVE, BORN IN PUERTO RICO OR OTHER U.S. ISLAND AREAS', 'NATIVE, BORN ABROAD OF AMERICAN PARENT OR PARENTS', 'FOREIGN BORN, U.S. CITIZEN BY NATURALIZATION', 'FOREIGN BORN, NOT A CITIZEN OF THE UNITED STATES')
summary(FS_Subset$'Citizenship_status', title = "PRCITSHP")
set.seed(1)
sample <- sample(c(TRUE, FALSE), nrow(FS_Subset), replace = TRUE, prob = c(0.6, 0.4))
train <- FS_Subset[sample, ]
test  <- FS_Subset[!sample, ]
str(test)
str(train)
logistic <- glm(FS_Status ~ States + Family_Size + Household_Income + SNAP + Citizenship_status + Number_of_Jobs + Education_Level   , data = train, family = "binomial")
summary(logistic)
logistic_model1.prob <- predict(logistic, test, type = "response")
logistic_model1.pred = rep("Food Secure", dim(test)[1])
logistic_model1.pred[logistic_model1.prob > .5] = "Food Insecure"
mean(logistic_model1.pred == test$FS_Status)
table(logistic_model1.pred, test$FS_Status)
test$logistic_model1.prob <- logistic_model1.prob
roc_model1 <- roc(FS_Status ~ logistic_model1.prob, data = test)
plot(roc_model1)
auc(roc_model1)
sum(test$FS_Status == "Food Secure")/sum(test$FS_Status == "Food Insecure")
weight_minority_class = sum(FS_Subset$FS_Status == "Food Secure")/sum(FS_Subset$FS_Status == "Food Insecure")
for(i in seq_len(NROW(FS_Subset))){
if(FS_Subset$FS_Status[i] == "Food Insecure"){
FS_Subset$Weight[i] = weight_minority_class
}
else
FS_Subset$Weight[i] = 1
}
FS_Subset$Weight <- as.numeric(FS_Subset$Weight)
summary(FS_Subset$Weight)
## Splitting again because train and test doesn't contain the weight column
set.seed(1)
sample <- sample(c(TRUE, FALSE), nrow(FS_Subset), replace = TRUE, prob = c(0.6, 0.4))
train <- FS_Subset[sample, ]
test  <- FS_Subset[!sample, ]
logistic_weighted <- glm(FS_Status ~ States + Family_Size + Household_Income + SNAP + Citizenship_status + Number_of_Jobs + Education_Level   , data = train,  weights = Weight, family = "binomial")
summary(logistic_weighted)
logistic_model2.prob <- predict(logistic_weighted, test, type = "response")
logistic_model2.pred = rep("Food Secure", dim(test)[1])
logistic_model2.pred[logistic_model2.prob > .5] = "Food Insecure"
mean(logistic_model2.pred == test$FS_Status)
table(logistic_model2.pred, test$FS_Status)
test$logistic_model2.prob <- logistic_model2.prob
roc_model2 <- roc(FS_Status ~ logistic_model2.prob, data = test)
plot(roc_model2)
auc(roc_model2)
scaledata <- as.data.frame(scale(FS_Subset[1:11], center = TRUE, scale = TRUE))
scaledata <- as.data.frame(scale(FS_Subset[,2:11], center = TRUE, scale = TRUE))
scaledata <- as.data.frame(scale(FS_Subset[,3:11], center = TRUE, scale = TRUE))
scaledata <- as.data.frame(scale(FS_Subset[3:11], center = TRUE, scale = TRUE))
scaledata <- as.data.frame(scale(FS_Subset, center = TRUE, scale = TRUE))
scaledata <- as.data.frame(scale(FS_Subset[], center = TRUE, scale = TRUE))
scaledata <- as.data.frame(scale(FS_Subset[1:9], center = TRUE, scale = TRUE))
scaledata <- as.data.frame(scale(FS_Subset[2:9], center = TRUE, scale = TRUE))
scaledata <- as.data.frame(scale(FS_Subset.numeric[2:9], center = TRUE, scale = TRUE))
View(FS_Subset)
set.seed(1000)
knn_sample <- FS_Subset(2, nrow(FS_Subset), replace=TRUE, prob=c(0.67, 0.33))
set.seed(1000)
knn_sample <- sample(2, nrow(FS_Subset), replace=TRUE, prob=c(0.67, 0.33))
set.seed(1000)
knn_sample <- sample(2, nrow(FS_Subset), replace=TRUE, prob=c(0.67, 0.33))
knn_training <- FS_Subset[knn_sample==1, 1:11]
knn_test <- FS_Subset[knn_sample==2, 1:11]
knn.trainLabels <- FS_Subset[iris_sample==1, 5]
knn.trainLabels <- FS_Subset[knn_sample==1, 5]
knn.testLabels <- FS_Subset[knn_sample==2, 5]
knn_pred <- knn(train = knn_training, test = knn_test, cl=FS_Subset.trainLabels, k=7)
loadPkg("FNN")
knn_pred <- knn(train = knn_training, test = knn_test, cl=FS_Subset.trainLabels, k=7)
loadPkg("FNN")
knn_pred <- knn(train = knn_training, test = knn_test, cl=FS_Status.trainLabels, k=7)
loadPkg("FNN")
library(class)
knn_pred <- knn(train = knn_training, test = knn_test, cl=FS_Status.trainLabels, k=7)
loadPkg("FNN")
library(class)
knn_pred <- knn(train = knn_training, test = knn_test, cl=knn.trainLabels, k=7)
library(class)
knn_pred <- knn(train = knn_training, test = knn_test, cl=knn.trainLabels, k=7)
loadPkg("FNN")
knn_pred <- knn(train = knn_training, test = knn_test, cl=knn.trainLabels, k=7)
str(FS_Subset)
knn_data <- as.numeric(FS_Subset$Family_Size)
knn_data <- as.numeric(FS_Subset$Family_Size)
str(knn_data)
knn_data <- as.numeric(FS_Subset$Family_Size, FS_Subset$Household_Income)
str(knn_data)
knn_data <- as.numeric(FS_Subset$Family_Size,Household_Income)
knn_data <- as.numeric(FS_Subset$[Family_Size,Household_Income])
knn_data <- FS_Subset
knn_data$Family_Size <- as.numeric(FS_Subset$Family_Size,Household_Income)
knn_data <- FS_Subset
knn_data$Family_Size <- as.numeric(FS_Subset$Family_Size)
str(knn_data)
knn_data <- FS_Subset
knn_data$Family_Size <- as.numeric(FS_Subset$Family_Size)
knn_data$Household_Income <- as.numeric(FS_Subset$Household_Income)
str(knn_data)
knn_data <- FS_Subset
knn_data$Family_Size <- as.numeric(FS_Subset$Family_Size)
knn_data$Household_Income <- as.numeric(FS_Subset$Household_Income)
knn_data$Number_of_Jobs <- as.numeric(FS_Subset$Number_of_Jobs)
knn_data$Hours_on_Jobs <- as.numeric(FS_Subset$Hours_on_Jobs)
knn_data$Number_of_children <- as.numeric(FS_Subset$Number_of_children)
str(knn_data)
knn_data <- FS_Subset
knn_data$Family_Size <- as.numeric(FS_Subset$Family_Size)
knn_data$Household_Income <- as.numeric(FS_Subset$Household_Income)
knn_data$Number_of_Jobs <- as.numeric(FS_Subset$Number_of_Jobs)
knn_data$Hours_on_Jobs <- as.numeric(FS_Subset$Hours_on_Jobs)
knn_data$Number_of_children <- as.numeric(FS_Subset$Number_of_children)
str(knn_data)
num_data <- as.numeric(knn_data)
knn_data <- FS_Subset
knn_data$Family_Size <- as.numeric(FS_Subset$Family_Size)
knn_data$Household_Income <- as.numeric(FS_Subset$Household_Income)
knn_data$Number_of_Jobs <- as.numeric(FS_Subset$Number_of_Jobs)
knn_data$Hours_on_Jobs <- as.numeric(FS_Subset$Hours_on_Jobs)
knn_data$Number_of_children <- as.numeric(FS_Subset$Number_of_children)
str(knn_data)
num_data <- subset(knn_data, is.numeric==TRUE)
knn_data <- FS_Subset
knn_data$Family_Size <- as.numeric(FS_Subset$Family_Size)
knn_data$Household_Income <- as.numeric(FS_Subset$Household_Income)
knn_data$Number_of_Jobs <- as.numeric(FS_Subset$Number_of_Jobs)
knn_data$Hours_on_Jobs <- as.numeric(FS_Subset$Hours_on_Jobs)
knn_data$Number_of_children <- as.numeric(FS_Subset$Number_of_children)
str(knn_data)
num_data <- subset(knn_data, is.numeric=TRUE)
num_data
str(num_data)
knn_data <- FS_Subset
knn_data$Family_Size <- as.numeric(FS_Subset$Family_Size)
knn_data$Household_Income <- as.numeric(FS_Subset$Household_Income)
knn_data$Number_of_Jobs <- as.numeric(FS_Subset$Number_of_Jobs)
knn_data$Hours_on_Jobs <- as.numeric(FS_Subset$Hours_on_Jobs)
knn_data$Number_of_children <- as.numeric(FS_Subset$Number_of_children)
str(knn_data)
num_data <- select_if(knn_data, is.numeric=TRUE)
num_data <- select_if(knn_data, is.numeric)
str(num_data)
scaledata <- as.data.frame(scale(num_data, center = TRUE, scale = TRUE))
set.seed(1000)
knn_sample <- sample(2, nrow(scaledata), replace=TRUE, prob=c(0.67, 0.33))
knn_data <- FS_Subset
knn_data$Family_Size <- as.numeric(FS_Subset$Family_Size)
knn_data$Household_Income <- as.numeric(FS_Subset$Household_Income)
knn_data$Number_of_Jobs <- as.numeric(FS_Subset$Number_of_Jobs)
knn_data$Hours_on_Jobs <- as.numeric(FS_Subset$Hours_on_Jobs)
knn_data$Number_of_children <- as.numeric(FS_Subset$Number_of_children)
str(knn_data)
num_data <- select_if(knn_data, is.numeric)
num_data  <- num_data+FS_Subset$FS_Status
knn_data <- FS_Subset
knn_data$Family_Size <- as.numeric(FS_Subset$Family_Size)
knn_data$Household_Income <- as.numeric(FS_Subset$Household_Income)
knn_data$Number_of_Jobs <- as.numeric(FS_Subset$Number_of_Jobs)
knn_data$Hours_on_Jobs <- as.numeric(FS_Subset$Hours_on_Jobs)
knn_data$Number_of_children <- as.numeric(FS_Subset$Number_of_children)
knn_data$FS_Status <- as.numeric(FS_Subset$FS_Status)
str(knn_data)
num_data <- select_if(knn_data, is.numeric)
str(num_data)
knn_data <- FS_Subset
knn_data$Family_Size <- as.numeric(FS_Subset$Family_Size)
knn_data$Household_Income <- as.numeric(FS_Subset$Household_Income)
knn_data$Number_of_Jobs <- as.numeric(FS_Subset$Number_of_Jobs)
knn_data$Hours_on_Jobs <- as.numeric(FS_Subset$Hours_on_Jobs)
knn_data$Number_of_children <- as.numeric(FS_Subset$Number_of_children)
knn_data$FS_Status <- as.numeric(FS_Subset$FS_Status)
num_data <- select_if(knn_data, is.numeric)
str(num_data)
knn_data <- FS_Subset
knn_data$Family_Size <- as.numeric(FS_Subset$Family_Size)
knn_data$Household_Income <- as.numeric(FS_Subset$Household_Income)
knn_data$Number_of_Jobs <- as.numeric(FS_Subset$Number_of_Jobs)
knn_data$Hours_on_Jobs <- as.numeric(FS_Subset$Hours_on_Jobs)
knn_data$Number_of_children <- as.numeric(FS_Subset$Number_of_children)
knn_data$FS_Status <- as.numeric(FS_Subset$FS_Status)
num_data <- select_if(knn_data, is.numeric)
num_data <- drop(num_data$Weight)
str(num_data)
knn_data <- FS_Subset
knn_data$Family_Size <- as.numeric(FS_Subset$Family_Size)
knn_data$Household_Income <- as.numeric(FS_Subset$Household_Income)
knn_data$Number_of_Jobs <- as.numeric(FS_Subset$Number_of_Jobs)
knn_data$Hours_on_Jobs <- as.numeric(FS_Subset$Hours_on_Jobs)
knn_data$Number_of_children <- as.numeric(FS_Subset$Number_of_children)
knn_data$FS_Status <- as.numeric(FS_Subset$FS_Status)
num_data <- select_if(knn_data, is.numeric)
num_data <- asdataframe(num_data[-c(5)])
knn_data <- FS_Subset
knn_data$Family_Size <- as.numeric(FS_Subset$Family_Size)
knn_data$Household_Income <- as.numeric(FS_Subset$Household_Income)
knn_data$Number_of_Jobs <- as.numeric(FS_Subset$Number_of_Jobs)
knn_data$Hours_on_Jobs <- as.numeric(FS_Subset$Hours_on_Jobs)
knn_data$Number_of_children <- as.numeric(FS_Subset$Number_of_children)
knn_data$FS_Status <- as.numeric(FS_Subset$FS_Status)
num_data <- select_if(knn_data, is.numeric)
num_data <- as.dataframe(num_data[-c(5)])
knn_data <- FS_Subset
knn_data$Family_Size <- as.numeric(FS_Subset$Family_Size)
knn_data$Household_Income <- as.numeric(FS_Subset$Household_Income)
knn_data$Number_of_Jobs <- as.numeric(FS_Subset$Number_of_Jobs)
knn_data$Hours_on_Jobs <- as.numeric(FS_Subset$Hours_on_Jobs)
knn_data$Number_of_children <- as.numeric(FS_Subset$Number_of_children)
knn_data$FS_Status <- as.numeric(FS_Subset$FS_Status)
num_data <- select_if(knn_data, is.numeric)
num_data <- as.data.frame(num_data[-c(5)])
str(num_data)
knn_data <- FS_Subset
knn_data$Family_Size <- as.numeric(FS_Subset$Family_Size)
knn_data$Household_Income <- as.numeric(FS_Subset$Household_Income)
knn_data$Number_of_Jobs <- as.numeric(FS_Subset$Number_of_Jobs)
knn_data$Hours_on_Jobs <- as.numeric(FS_Subset$Hours_on_Jobs)
knn_data$Number_of_children <- as.numeric(FS_Subset$Number_of_children)
knn_data$FS_Status <- as.numeric(FS_Subset$FS_Status)
num_data <- select_if(knn_data, is.numeric)
num_data <- as.data.frame(num_data[-c(6)])
str(num_data)
knn_data <- FS_Subset
knn_data$Family_Size <- as.numeric(FS_Subset$Family_Size)
knn_data$Household_Income <- as.numeric(FS_Subset$Household_Income)
knn_data$Number_of_Jobs <- as.numeric(FS_Subset$Number_of_Jobs)
knn_data$Hours_on_Jobs <- as.numeric(FS_Subset$Hours_on_Jobs)
knn_data$Number_of_children <- as.numeric(FS_Subset$Number_of_children)
knn_data$FS_Status <- as.numeric(FS_Subset$FS_Status)
num_data <- select_if(knn_data, is.numeric)
num_data <- as.data.frame(num_data[-c(7)])
str(num_data)
scaledata <- as.data.frame(scale(num_data, center = TRUE, scale = TRUE))
set.seed(1000)
knn_sample <- sample(2, nrow(scaledata), replace=TRUE, prob=c(0.67, 0.33))
knn_training <- scaledata[knn_sample==1, 1:5]
knn_test <- FS_Subset[knn_sample==2, 6]
knn_training <- scaledata[knn_sample==1, 1:5]
knn_test <- FS_Subset[knn_sample==2, 1:5]
knn.trainLabels <- num_data[knn_sample==1, 5]
knn.testLabels <- num_data[knn_sample==2, 5]
loadPkg("FNN")
knn_pred <- knn(train = knn_training, test = knn_test, cl=knn.trainLabels, k=7)
# Installing Packages
install.packages("e1071")
install.packages("caTools")
loadPkg("FNN")
knn_pred <- knn(train = knn_training, test = knn_test, cl=knn.trainLabels, k=7)
# Installing Packages
install.packages("e1071")
install.packages("caTools")
install.packages("class")
# Loading package
library(e1071)
library(caTools)
library(class)
knn_pred <- knn(train = knn_training, test = knn_test, cl=knn.trainLabels, k=7)
knn.trainLabels <- num_data[knn_sample==1, 6]
knn.testLabels <- num_data[knn_sample==2, 6]
knn_pred <- knn(train = knn_training, test = knn_test, cl=knn.trainLabels, k=7)
library(FNN)
knn_pred <- knn(train = knn_training, test = knn_test, cl=knn.trainLabels, k=7)
knn_pred <- knn(train = knn_training, test = knn_test, cl=knn.trainLabels, k=3)
# Installing Packages
install.packages("e1071")
install.packages("caTools")
install.packages("class")
# Loading package
library(e1071)
library(caTools)
library(class)
install.packages("e1071")
install.packages("caTools")
install.packages("class")
knn_pred <- class::knn(train = knn_training, test = knn_test, cl=knn.trainLabels, k=3)
library(class)
knn_pred <- knn(train = knn_training, test = knn_test, cl=knn.trainLabels, k=3)
knn_data <- FS_Subset
knn_data$Family_Size <- as.numeric(FS_Subset$Family_Size)
knn_data$Household_Income <- as.numeric(FS_Subset$Household_Income)
knn_data$Number_of_Jobs <- as.numeric(FS_Subset$Number_of_Jobs)
knn_data$Hours_on_Jobs <- as.numeric(FS_Subset$Hours_on_Jobs)
knn_data$Number_of_children <- as.numeric(FS_Subset$Number_of_children)
knn_data$FS_Status <- as.numeric(FS_Subset$FS_Status)
num_data <- select_if(knn_data, is.numeric)
Food_Sec <- data.frame(read.csv("dec21pub.csv"))
FS_Subset <- subset(Food_Sec, HRINTSTA == 001 & HRSUPINT == 001 & HRFS12MD != -9)
FS_Subset <- subset(FS_Subset, select = c(	"GESTFIPS",	"HRNUMHOU",	"HEFAMINC",	"HESP1",	"PTDTRACE",	"PRCITSHP",	"PEMJNUM",	"PEHRUSL1",	"PEEDUCA", "PRNMCHLD" , "HRFS12MD"))
FS_Subset <- FS_Subset %>% rename("States" = "GESTFIPS", "Family_Size" = "HRNUMHOU",	"Household_Income" = "HEFAMINC",	"SNAP" = "HESP1",	"Ethnicity" =	"PTDTRACE", "Citizenship_status" = "PRCITSHP",	"Number_of_Jobs" = "PEMJNUM",	"Hours_on_Jobs" = "PEHRUSL1" , "Education_Level" = "PEEDUCA" , "Number_of_children" = "PRNMCHLD",  "FoodSecurity_score" = "HRFS12MD")
library(dplyr)
library(ezids)
library(ggplot2)
library(epiR)
library(pROC)
FS_Subset <- subset(Food_Sec, HRINTSTA == 001 & HRSUPINT == 001 & HRFS12MD != -9)
FS_Subset <- subset(FS_Subset, select = c(	"GESTFIPS",	"HRNUMHOU",	"HEFAMINC",	"HESP1",	"PTDTRACE",	"PRCITSHP",	"PEMJNUM",	"PEHRUSL1",	"PEEDUCA", "PRNMCHLD" , "HRFS12MD"))
FS_Subset <- FS_Subset %>% rename("States" = "GESTFIPS", "Family_Size" = "HRNUMHOU",	"Household_Income" = "HEFAMINC",	"SNAP" = "HESP1",	"Ethnicity" =	"PTDTRACE", "Citizenship_status" = "PRCITSHP",	"Number_of_Jobs" = "PEMJNUM",	"Hours_on_Jobs" = "PEHRUSL1" , "Education_Level" = "PEEDUCA" , "Number_of_children" = "PRNMCHLD",  "FoodSecurity_score" = "HRFS12MD")
## Converting the all the columns to factors as they are all ordinal(except the Id, but since it's categorical i'm converting it into a factor too)
FS_Subset[] <- lapply( FS_Subset, factor)
str(FS_Subset)
levels(FS_Subset$'FoodSecurity_score') <- c( "High Food Security", "Marginal Food Security", "Low Food Security", "Very Low Food Security")
FS_Subset$FS_Status <- FS_Subset$FoodSecurity_score
levels(FS_Subset$FS_Status) <- c( "Food Secure", "Food Secure", "Food Insecure", "Food Insecure")
levels(FS_Subset$'Ethnicity') <- c('White only', 'Black only', 'American Indian, Alaskan native only', 'Asian Only', 'Hawaiian', 'White-black', 'White-AI', 'White-Asian', 'White-HP', 'Black-AI', 'Black-Asian', 'Black-HP', 'AI-Asian', 'AI-HP', 'Asian-HP', 'W-B-AI', 'W-B-A', 'W-B-HP', 'W-AI-A', 'W-AI-HP', 'W-A-HP', 'B-AI-A', 'W-B-AL-A', 'W-AI-A-HP', 'Other 3 race combo', 'Other 4 and 5 race combo')
levels(FS_Subset$'Citizenship_status') <- c('NATIVE, BORN IN THE UNITED STATES', 'NATIVE, BORN IN PUERTO RICO OR OTHER U.S. ISLAND AREAS', 'NATIVE, BORN ABROAD OF AMERICAN PARENT OR PARENTS', 'FOREIGN BORN, U.S. CITIZEN BY NATURALIZATION', 'FOREIGN BORN, NOT A CITIZEN OF THE UNITED STATES')
summary(FS_Subset$'Citizenship_status', title = "PRCITSHP")
set.seed(1)
sample <- sample(c(TRUE, FALSE), nrow(FS_Subset), replace = TRUE, prob = c(0.6, 0.4))
train <- FS_Subset[sample, ]
test  <- FS_Subset[!sample, ]
str(test)
str(train)
logistic <- glm(FS_Status ~ States + Family_Size + Household_Income + SNAP + Citizenship_status + Number_of_Jobs + Education_Level   , data = train, family = "binomial")
summary(logistic)
logistic_model1.prob <- predict(logistic, test, type = "response")
logistic_model1.pred = rep("Food Secure", dim(test)[1])
logistic_model1.pred[logistic_model1.prob > .5] = "Food Insecure"
mean(logistic_model1.pred == test$FS_Status)
table(logistic_model1.pred, test$FS_Status)
test$logistic_model1.prob <- logistic_model1.prob
roc_model1 <- roc(FS_Status ~ logistic_model1.prob, data = test)
plot(roc_model1)
auc(roc_model1)
sum(test$FS_Status == "Food Secure")/sum(test$FS_Status == "Food Insecure")
weight_minority_class = sum(FS_Subset$FS_Status == "Food Secure")/sum(FS_Subset$FS_Status == "Food Insecure")
for(i in seq_len(NROW(FS_Subset))){
if(FS_Subset$FS_Status[i] == "Food Insecure"){
FS_Subset$Weight[i] = weight_minority_class
}
else
FS_Subset$Weight[i] = 1
}
FS_Subset$Weight <- as.numeric(FS_Subset$Weight)
summary(FS_Subset$Weight)
## Splitting again because train and test doesn't contain the weight column
set.seed(1)
sample <- sample(c(TRUE, FALSE), nrow(FS_Subset), replace = TRUE, prob = c(0.6, 0.4))
train <- FS_Subset[sample, ]
test  <- FS_Subset[!sample, ]
logistic_weighted <- glm(FS_Status ~ States + Family_Size + Household_Income + SNAP + Citizenship_status + Number_of_Jobs + Education_Level   , data = train,  weights = Weight, family = "binomial")
summary(logistic_weighted)
logistic_model2.prob <- predict(logistic_weighted, test, type = "response")
logistic_model2.pred = rep("Food Secure", dim(test)[1])
logistic_model2.pred[logistic_model2.prob > .5] = "Food Insecure"
mean(logistic_model2.pred == test$FS_Status)
table(logistic_model2.pred, test$FS_Status)
test$logistic_model2.prob <- logistic_model2.prob
roc_model2 <- roc(FS_Status ~ logistic_model2.prob, data = test)
plot(roc_model2)
auc(roc_model2)
str(FS_Subset)
knn_data <- FS_Subset
knn_data$Family_Size <- as.numeric(FS_Subset$Family_Size)
knn_data$Household_Income <- as.numeric(FS_Subset$Household_Income)
knn_data$Number_of_Jobs <- as.numeric(FS_Subset$Number_of_Jobs)
knn_data$Hours_on_Jobs <- as.numeric(FS_Subset$Hours_on_Jobs)
knn_data$Number_of_children <- as.numeric(FS_Subset$Number_of_children)
knn_data$FS_Status <- as.numeric(FS_Subset$FS_Status)
num_data <- select_if(knn_data, is.numeric)
num_data <- as.data.frame(num_data[-c(7)])
str(num_data)
scaledata <- as.data.frame(scale(num_data, center = TRUE, scale = TRUE))
set.seed(1000)
knn_sample <- sample(2, nrow(scaledata), replace=TRUE, prob=c(0.67, 0.33))
knn_training <- scaledata[knn_sample==1, 1:5]
knn_test <- scaledata[knn_sample==2, 1:5]
knn.trainLabels <- num_data[knn_sample==1, 6]
knn.testLabels <- num_data[knn_sample==2, 6]
# Installing Packages
install.packages("e1071")
install.packages("caTools")
install.packages("e1071")
install.packages("class")
# Loading package
library(e1071)
library(caTools)
install.packages("class")
library(class)
knn_pred <- knn(train = knn_training, test = knn_test, cl=knn.trainLabels, k=3)
library("class")
knn_pred <- knn(train = knn_training, test = knn_test, cl=knn.trainLabels, k=3)
library(class)
knn_pred <- knn(train = knn_training, test = knn_test, cl=knn.trainLabels, k=3)
library(class)
loadPkg("gmodels")
loadPkg("gmodels")
loadPkg("FNN")
loadPkg("caret")
knn.5 <- knn(train=knn_training, test=knn_test, cl=knn.train_labels, k=5)
knn.5 <- knn(train=knn_training, test=knn_test, cl=knn.trainLabels, k=5)
100 * sum(knn.testLabels == knn.5)/NROW(knn.testLabels)
library(class)
knn_pred <- knn(train = knn_training, test = knn_test, cl=knn.trainLabels, k=3)
knn_pred
library(class)
knn_pred <- knn(train = knn_training, test = knn_test, cl=knn.trainLabels, k=3)
knn_pred
knn_crosst <- gmodels::CrossTable(iris.testLabels, iris_pred, prop.chisq = FALSE)
knn_crosst <- gmodels::CrossTable(knn.testLabels, knn_pred, prop.chisq = FALSE)
# create an empty dataframe to store the results from confusion matrices
ResultDf = data.frame( k=numeric(0), Total.Accuracy= numeric(0), row.names = NULL )
knn_crosst <- gmodels::CrossTable(knn.testLabels, knn(train = Family_Size)_pred, prop.chisq = FALSE)
knn_crosst <- gmodels::CrossTable(knn.testLabels, train = knn_pred, prop.chisq = FALSE)
# create an empty dataframe to store the results from confusion matrices
ResultDf = data.frame( k=numeric(0), Total.Accuracy= numeric(0), row.names = NULL )
kval = 3
knn_pred <- knn(train = knn_training, test = knn_test, cl=knn.trainLabels, k=kval)
knn_crosst <- gmodels::CrossTable(knn.testLabels, train = knn_pred, prop.chisq = FALSE)
# create an empty dataframe to store the results from confusion matrices
ResultDf = data.frame( k=numeric(0), Total.Accuracy= numeric(0), row.names = NULL )
kval = 3
knn_pred <- knn(train = knn_training, test = knn_test, cl=knn.trainLabels, k=kval)
knn_crosst <- gmodels::CrossTable(knn.testLabels, train = knn_pred, prop.chisq = FALSE)
print( paste("k = ", kval) )
knn_crosst
#
cm = confusionMatrix(knn_pred, reference = knn.testLabels ) # from caret library
#
cm = caret::confusionMatrix(knn_pred, reference = knn.testLabels ) # from caret library
library(caret)
install.packages("caret")
library(caret)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("caret")
library(caret)
install.packages("rlang")
install.packages("rlang")
install.packages("caret")
library(caret)
cm <- acret::confusionMatrix(knn_pred, reference = knn.testLabels ) # from caret library
cm <- caret::confusionMatrix(knn_pred, reference = knn.testLabels ) # from caret library
install.packages("vctrs")
install.packages("vctrs")
cm <- caret::confusionMatrix(knn_pred, reference = knn.testLabels ) # from caret library
install.packages("vctrs")
update.packages("vctrs")
install.packages("vctrs")
cm <- caret::confusionMatrix(knn_pred, reference = knn.testLabels ) # from caret library
cm <- confusionMatrix(knn_pred, reference = knn.testLabels )
library(caret)
